<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: outreachy | IIO DRIVERS]]></title>
  <link href="/blog/categories/outreachy/atom.xml" rel="self"/>
  <link href="/"/>
  <updated>2018-01-07T14:07:56+02:00</updated>
  <id>/</id>
  <author>
    <name><![CDATA[Georgiana Chelu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Start the adeventure: The Setup Part]]></title>
    <link href="/blog/2018/01/07/start-the-adeventure-the-setup-part/"/>
    <updated>2018-01-07T12:22:26+02:00</updated>
    <id>/blog/2018/01/07/start-the-adeventure-the-setup-part</id>
    <content type="html"><![CDATA[<h2>Intro</h2>

<p><img class="right" src="/images/yoda-tux.jpg" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>Our wise friend, will introduce us the world of Linux Kernel. Check below the piece of wisdom from Yoda Tux.</p>

<p>Good coding vibe needs a good working environment. So, our setup, let’s see how to do.  There are several simple steps and, take them one by one, will we.  Hihihi!</p>

<p><a href='https://ro.pinterest.com/pin/270356783857623037/'>Link to the Yoda Tux image</a></p>

<p><br></p>

<h2>The source code</h2>

<p>Download the kernel source tree of Industrial I/O:</p>

<p><code>git clone https://www.kernel.org/pub/scm/linux/kernel/git/jic23/iio.git</code></p>

<h2>The default config</h2>

<p>The next step is to configure the kernel. As a good practice, use the default configuration and later add or remove kernel modules. To create the configuration file, run the following command:</p>

<p><code>make defconfig</code></p>

<p>The configuration is based on the architecture type of the host system (eg: x86, powerpc, sparc64). The available architectures are to the iio/arch path.</p>

<h2>Customize the kernel config</h2>

<p>As the I/O subsystem is not part of the default configuration, we have to add the module using the command:</p>

<p><code>make menuconfig</code></p>

<p>This command opens the menu from the image, which is not friendly, but easy to use. Navigate with the arrows keys, press Y to include a module, press N to exclude a module and M to create a module from that feature/driver.</p>

<p><img class="center" src="/images/menuconfig.png" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>To search for any feature or module, just press the <strong>/</strong> (the slash key from the keyboard) and type the name.</p>

<p><img class="center" src="/images/search-bar.png" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>At this moment, we are looking for the Industrial I/O Subsystem. Let’s type IIO and press Enter. The result looks like the below image.</p>

<p><img class="center" src="/images/iio-result.png" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>Each results from the list has a corresponding number between <strong>parentheses</strong>. Go to the feature by pressing the indicated number.</p>

<p>In this situation, the Industrial I/O subsystem has the number <strong>(1)</strong>, but it depends on other 3 features:
<em>RTC_DRV_HID_SENSOR_TIME</em>
<em>RTC_CLASS</em>
<em>USB_HID</em></p>

<p>The first one is marked with <strong>[=n]</strong>, which means that it is not selected to be part of the kernel configuration. Adding this features includes automatically the Industrial I/O module in the kernel. So, let’s search for the <em>RTC_DRV_HID_SENSOR_TIME</em> and include it.  Further, search again for the IIO. Check if the feature is marked with <strong>[=y]</strong>.</p>

<p>Save the new kernel configuration by pressing the <strong>save</strong> button. Keep the default name of the configuration file which is <strong>.config</strong>. You can check the existence of this file in the <strong>iio</strong> folder (the root folder of the source code).</p>

<h2>Compile the source code</h2>

<p>The next step is to compile the kernel. It is recommended command to use all the processing units in order to finish the compiling fast. In the next command, the <strong>nproc</strong> gives the maximum number of the processor units available on your hardware. So, take a break, have some coffee or tea and come back later.</p>

<p><code>make -j `nproc`</code></p>

<p>In case you still want to use the computer during the processing time, replace the <strong>nproc</strong> with a number lower than the maximum units.</p>

<p>In case a feature was marked as module in the menuconfig, the module (a file with he <strong>.ko</strong> extension) will be available when the compiling is finished.</p>

<h2>The kernek image</h2>

<p>After the compiling is done, the kernel image could be found on the path:</p>

<p><code>iio/arch/your_architecture/boot/bzImage</code></p>

<p>In my case, the path is <strong>iio/arch/x86_64/boot/bzImage</strong> because the kernel was compiled for a 64bit Intel architecture.</p>

<h2>Qemu setup</h2>

<p>The Qemu is an easy and fast tool to create a virtual machine. Follow the tutorial to build a qemu with a custom kernel (<a href='https://mudongliang.github.io/2017/09/12/how-to-build-a-custom-linux-kernel-for-qemu.html'>link</a>) and use the kernel image that you have just compiled.</p>

<p>My piece of advice is to run the qemu as in the tutorial, with</p>

<p><code>-nographic -append "console=ttyS0"</code></p>

<p>These two parameters let the qemu to run without opening a new windows and to show the output in the working terminal.</p>

<h2>Possible issue:</h2>

<p>The qemu is on 32bit, but the kernel is compiled on 64bit. Check in the menu config if the first option matches the type of the qemu architecture.
<img class="center" src="/images/arch-type.png" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<h2>Time to work</h2>

<p>In case you encounter a problem with the tutorial, leave a comment and as Yoda Tux would say:</p>

<blockquote>
Patience you must have, my young padawan.
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello from the Tux side]]></title>
    <link href="/blog/2017/12/05/hello-from-the-tux-side/"/>
    <updated>2017-12-05T01:12:19+02:00</updated>
    <id>/blog/2017/12/05/hello-from-the-tux-side</id>
    <content type="html"><![CDATA[<p>Hello!</p>

<p>I am Georgiana and I am currently pursuing a Master&rsquo;s Degree in Advanced Network Security at the University Politehnica of Bucharest. In addition to this, I am glad to say that I was accepted to the Outreachy Round 15. The project that I was selected for aims to build an Industrial I/O Driver.</p>

<p>This journey started 3 years ago when I applied to Outreachy for the first time. Back then, my lack of experience did not stop me to give it a try. The result was not the one I was expected and my confidence faded. Thus, the following years, my main focus was on building a solid knowledge in the C programming language, Git and Linux Kernel. Now, I am happy that I will write my first driver for the IIO Linux Kernel module, under the guidance of Daniel Băluță and Alison Schofield. I own them lot of thanks for their time and their support.</p>

<p>The community played an important role by helping me during the application period. The mentors had an incredible patience for our silly mistakes and their responses revealed professionalism, passion and attention to details. Regarding my contribution to Linux Kernel, my struggle in the past was the Git tool. But this time, I discovered the beauty of using this version control system. Now, I am ready to level up my knowledge and confidence.</p>

<p><img class="right" src="/images/wizard-tux.jpg" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>So, let the adventure of IIO Drivers begin! Tux will join me in this journey and help me during the future challenges. He will help me through debugging sessions (as rubber duck) or will make things happen (as a wizard would do).</p>

<p><a href='http://supermaitre.eklablog.fr/'>Wizard Tux image source.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, Tux!]]></title>
    <link href="/blog/2017/11/18/hello-tux/"/>
    <updated>2017-11-18T19:11:42+02:00</updated>
    <id>/blog/2017/11/18/hello-tux</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
