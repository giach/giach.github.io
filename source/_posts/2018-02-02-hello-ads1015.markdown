---
layout: post
title: "Hello, ADS1015!"
date: 2018-02-02 01:13:07 +0200
comments: true
categories: 
---

## Tux and his Gibson

{% img right /images/tux-guitar.jpg 'image' 'images' %}

His main hobby is playing guitar, especially electric guitar which makes the sound of the guitar to be heard from the Earth to the Moon. Tux told me that the first guitar which performed analog-to-digital conversion was a Gibson guitar in 2002. 

<p>
<a href='https://ro.pinterest.com/pin/270356783857623037/'>Link to the Tux image</a>

<br> <br> <br> <br>
An analog-to-digital converter takes an analog signal as input and outputs a digital signal. See the below image to fully understand the difference between these two types of signals.
{% img center /images/analog-to-digial-signal.jpg 'image' 'images' %}

<a href='http://pediaa.com/difference-between-analog-and-digital-signals/'>Link to the Analog to Digital Signal</a>

## ADS1015 sensor

In the past weeks our goal was to develop a driver for an ADC sensor, the ADS1118. By looking through the existing ADC drivers in the Linux Kernel source we found out that there is a converter with similar characteristics and that converter is ADS1015.

The main difference between ADS1118 and ADS1015 is the serial communication interface. The first one is on SPI (serial peripheral interface) and the second one is on I2C interface. 

The challenge was to split the code for ADS1118 into a core file and an I2C file and to add the SPI file. As you may guess, the core file contains the common functions used to read from channels and to convert the signal into digital values. The SPI and I2C files, are used for the communication between the sensor and the adaptor or microcontroller. 

## Compile and configure the Linux Kernel for Raspberry Pi

For checking if the I2C communication is still working after the split, I used a Raspberry Pi. If you have a Raspberry Pi and want to a connect a sensor from linux/drivers/iio, follow these steps:

<p>
Download the from the official site.
<br>
`wget https://downloads.raspberrypi.org/raspbian_latest`
<p>
Write the Raspbian image to the SD card using <a href='https://etcher.io/'>Etcher</a>.
<p>
Download the kernel source for Raspberry.
<br>
`git clone --depth=1 https://github.com/raspberrypi/linux`
<p>
Make the default configuration.
<br>
`make bcm2709_defconfig`
<p>
Compile the kernel.
<br>
`make -j4 zImage modules dtbs`
<p>
Install the modules.
<br>
`sudo make modules_install`
<p>
Copy the files to /boot.
<br>
`sudo cp arch/arm/boot/dts/*.dtb /boot/`
`sudo cp arch/arm/boot/dts/overlays/*.dtb* /boot/overlays/`
`sudo cp arch/arm/boot/zImage /boot/kernel7.img`
<p>
Reboot the Raspberry

<p>

## Connect the pins

Before connecting the sensor, be sure that you have the right tools. Install the i2c-tools and check the pins.
<br>
`sudo apt-get install i2c-tools`
<br>
`sudo i2cdetect -y 1`

<p>
Make the following connections from ADS1015 to your Raspberry Pi:
<br>
*	VDD to 3v3 Power (pin 1)
<br>
*	SDA to Data (pin 3)
<br>
*	SCL to Clock (pin 5)
<br>
*	GND to Ground (pin 6) 

The Raspberry's pins and ADS1015's pins can be found in the below images.

{% img center /images/ads1015.png 'image' 'images' %}
{% img center /images/raspberryspins.png 'image' 'images' %}

<a href='http://int03.co.uk/blog/2014/12/17/analogue-input-board-for-the-pressure-sensor-espiresso/'>Link to ADS1015</a>
<br>
<a href='https://pinout.xyz/pinout/i2c#'>Link to Raspberry's Pins</a>

## Measure the voltage

Now that we have the wire connections, create a new IIO device with the command:

`echo ads1015 0x48 > /sys/bus/i2c/devices/i2c-1/new_device`

After the sensor initialization, we can start measuring the voltage. 

For example, connect a wire from the Raspberry’s Pin 1 to the ADS1015’s A0 pin and check the /sys/bus/iio/devices/iio:device0/in_voltage0_raw file. 

`cat /sys/bus/iio/devices/iio:device0/in_voltage0_raw`

Another example is to connect a wire from Raspberry's Pin 6 to the ADS1015's A0 pin and check the same file. You will find that the voltage is 0 because A0 is wired to ground.

## Results
<p>
We managed to check the two examples after splitting the ADS1015 into the 2 files: core, i2c.
<p>
The next challenge is to check if the ADS1118 implementation is working. This ADC sensor has a SPI interface. See you soon!
